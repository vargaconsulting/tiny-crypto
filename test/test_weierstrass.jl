using Test
using TinyCrypto
import TinyCrypto: is_identity, is_infinity, is_singular, inverse,
                   point_neg, point_add, curve_points, scalar_mult,
                   is_point_on_curve, is_generator, subgroup_points

@testset "Weierstrass Curve Test Suite" begin
    # Example Weierstrass curve: y¬≤ = x¬≥ + 2x + 2 over ùîΩ‚ÇÅ‚Çá with generator (5,1)
    œÄ, a, b, q, h = 17, 2, 2, 19, 1
    Gxy = (5, 1)
    curve = Weierstrass(œÄ, a, b, q, h, Gxy)
    F = typeof(curve.G.point.x)

    G·∂ú = curve.G
    G = G·∂ú.point
    ‚àû = infinity(curve)
    ‚àû·∂ú = ECPoint(‚àû, curve)
    S = subgroup_points(curve)

    @test is_infinity(5 * ‚àû·∂ú)

    @testset "Sanity checks and scalar multiplication" begin
        @test is_point_on_curve(G·∂ú, curve)
        @test is_generator(G, curve, curve.order)

        @test is_identity(scalar_mult(0, G, curve), curve)
        @test is_identity(0 * G·∂ú)

        @test scalar_mult(1, G, curve) == G
        @test 1 * G·∂ú == G·∂ú

        @test scalar_mult(2, G, curve) == point_add(G, G, curve)
        @test 2 * G·∂ú == G·∂ú + G·∂ú

        @test is_identity(curve.order * G·∂ú)
    end

    @testset "Subgroup matches [n]G·∂ú for n ‚àà 0:q-1" begin
        expected = Set(n * G·∂ú for n in 0:curve.order - 1)
        actual   = Set(S)
        @test expected == actual
    end

    @testset "Point + identity = point" begin
        @test point_add(G, ‚àû, curve) == G
        @test point_add(‚àû, G, curve) == G
    end

    @testset "Point + inverse = identity" begin
        N = point_neg(G, curve)
        @test is_identity(point_add(G, N, curve), curve)
    end

    @testset "Inverse properties" begin
        for P·∂ú in S
            Q·∂ú = inverse(P·∂ú)
            @test is_identity(P·∂ú + Q·∂ú)
            @test inverse(inverse(P·∂ú)) == P·∂ú
            if !is_infinity(P·∂ú)
                @test Q·∂ú.point.x == P·∂ú.point.x
                @test Q·∂ú.point.y == -P·∂ú.point.y
            end
        end
    end

    @testset "Group law: [m]G + [n]G == [(m+n)%q]G" begin
        for m in 0:q-1, n in 0:q-1
            @test m * G·∂ú + n * G·∂ú == mod(m+n, q) * G·∂ú
        end
    end

    @testset "All curve points lie on the curve" begin
        for P in curve_points(curve)
            @test is_point_on_curve(ECPoint(P, curve), curve)
        end
    end

    @testset "Subgroup checks" begin
        @test all(is_identity, [q * P·∂ú for P·∂ú in S])
        @test length(S) == q
        @test length(unique(S)) == q
    end

    @testset "Reject invalid points" begin
        bad = Point{F}(F(42), F(1337))
        @test !is_point_on_curve(ECPoint(bad, curve), curve)
    end

    @testset "Doubling consistency" begin
        D‚ÇÅ = point_add(G, G, curve)
        D‚ÇÇ = scalar_mult(2, G, curve)
        @test D‚ÇÅ == D‚ÇÇ
    end

    @testset "Scalar multiplication with ‚àû" begin
        for k in 0:10
            @test is_infinity(k * ‚àû·∂ú)
        end
    end

    @testset "Curve is not singular" begin
        @test !is_singular(curve)
    end

    @testset "Negation operator -P·∂ú" begin
        for P·∂ú in S
            @test -P·∂ú == inverse(P·∂ú)
        end
    end

    @testset "Negation specific cases" begin
        Q = point_neg(‚àû, curve)
        @test Q == ‚àû

        G‚Åª = point_neg(G, curve)
        @test is_identity(point_add(G, G‚Åª, curve), curve)

        G‚Åª‚Åª = point_neg(G‚Åª, curve)
        @test G‚Åª‚Åª == G
    end

    @testset "Associativity sanity check" begin
        D·∂ú = ECPoint(point_add(G, G, curve), curve)
        G‚Åª = point_neg(G, curve)
        A = point_add(D·∂ú.point, G‚Åª, curve)
        B = point_add(G, point_add(G, G‚Åª, curve), curve)
        @test A == B
    end

    @testset "Infinity propagation" begin
        R‚ÇÅ = point_add(G, ‚àû, curve)
        R‚ÇÇ = point_add(‚àû, G, curve)
        @test R‚ÇÅ == G
        @test R‚ÇÇ == G
    end
end
