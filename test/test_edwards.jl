using Test
using TinyCrypto
import TinyCrypto: is_identity, is_infinity, inverse, is_singular, point_neg, point_add

@testset "Edwards Curve Test Suite" begin
    # Shared curve setup Twisted Edwards curve: 1x¬≤ + y¬≤ = 1 + 15x¬≤y¬≤ |ùîΩ‚ÇÉ‚Çá with order: 11 cofactor: 4 and ùîæ(18,17)
    œÄ, a, d, order, cofactor = 37, 1, 15, 11, 4
    GÀ£ ∏    = (18, 17)   
    curve = TwistedEdwards(œÄ, a, d, order, cofactor, GÀ£ ∏)
    F = typeof(curve.G.point.x)

    G·∂ú = curve.G
    G = G·∂ú.point
    I = Point{F}(F(0), F(1))
    I·∂ú = ECPoint(I, curve)
    ‚àû = Point{F}(nothing, nothing)
    ‚àû·∂ú = ECPoint(‚àû, curve)
    S = subgroup_points(curve)

    @test is_infinity(5 * ‚àû·∂ú)

    @testset "Subgroup matches [n]G·∂ú for n ‚àà 0:q-1" begin
        expected = Set(n * G·∂ú for n in 0:curve.order - 1)
        actual   = Set(S)
        @test expected == actual
    end

    @testset "Sanity checks and scalar multiplication" begin
        @test is_point_on_curve(G·∂ú, curve)
        @test is_generator(G, curve, curve.order)

        @test is_identity(scalar_mult(0, G, curve), curve)
        @test is_identity(0 * G·∂ú)

        @test scalar_mult(1, G, curve) == G
        @test 1 * G·∂ú == G·∂ú

        @test scalar_mult(2, G, curve) == point_add(G, G, curve)
        @test 2 * G·∂ú == G·∂ú + G·∂ú

        @test scalar_mult(3, G, curve) == (3 * G·∂ú).point

        @test is_identity(curve.order * G·∂ú)
    end

    @testset "Point + identity = point" begin
        P·∂ú = G·∂ú
        R‚ÇÅ = point_add(P·∂ú.point, I·∂ú.point, curve)
        R‚ÇÇ = point_add(I·∂ú.point, P·∂ú.point, curve)
        @test R‚ÇÅ == G
        @test R‚ÇÇ == G
    end

    @testset "Point + inverse = identity" begin
        P·∂ú = G·∂ú
        N·∂ú = ECPoint(point_neg(P·∂ú.point, curve), curve)
        R‚ÇÅ·∂ú = ECPoint(point_add(P·∂ú.point, N·∂ú.point, curve), curve)
        @test is_identity(R‚ÇÅ·∂ú)
    end

    @testset "Inverse properties" begin
        @test is_infinity(inverse(‚àû·∂ú))
        for P·∂ú in S
            Q·∂ú = inverse(P·∂ú)
            @test is_identity(P·∂ú + Q·∂ú)
            @test inverse(inverse(P·∂ú)) == P·∂ú
            if !is_infinity(P·∂ú)
                @test Q·∂ú.point.x == -P·∂ú.point.x
                @test Q·∂ú.point.y == P·∂ú.point.y
            end
        end
    end

    @testset "Group law: [m]G + [n]G == [(m+n)%r]G" begin
        r = curve.order
        for m in 0:r-1, n in 0:r-1
            P·∂ú = m * G·∂ú
            Q·∂ú = n * G·∂ú
            @test P·∂ú + Q·∂ú == mod(m+n, r) * G·∂ú
        end
    end

    @testset "All curve points lie on the curve" begin
        for P in curve_points(curve)
            @test is_point_on_curve(ECPoint(P, curve), curve)
        end
    end

    @testset "Subgroup checks" begin
        @test all(is_identity, [curve.order * P·∂ú for P·∂ú in S])
        @test length(S) == curve.order
        @test length(unique(S)) == curve.order
    end

    @testset "Reject invalid points" begin
        bad = Point{F}(F(42), F(1337))
        @test !is_point_on_curve(ECPoint(bad, curve), curve)
    end

    @testset "Doubling consistency" begin
        D‚ÇÅ = point_add(G, G, curve)
        D‚ÇÇ = scalar_mult(2, G, curve)
        @test D‚ÇÅ == D‚ÇÇ
    end

    @testset "Scalar multiplication with ‚àû" begin
        for k in 0:10
            @test is_infinity(k * ‚àû·∂ú)
        end
    end

    @testset "Curve is not singular" begin
        @test !is_singular(curve)
    end

    @testset "Negation operator -P·∂ú" begin
        for P·∂ú in S
            @test -P·∂ú == inverse(P·∂ú)
        end
    end

    @testset "Negation specific cases" begin
        # Identity negation
        Q = point_neg(I, curve)
        @test Q == I

        # Infinity negation
        Q = point_neg(‚àû, curve)
        @test Q == ‚àû

        # Generator negation
        G‚Åª = point_neg(G, curve)
        @test is_identity(ECPoint(point_add(G, G‚Åª, curve), curve))

        # Double negation
        G‚Åª‚Åª = point_neg(G‚Åª, curve)
        @test G‚Åª‚Åª == G

        # Arbitrary valid point
        P = Point{F}(F(5), F(7))
        if is_point_on_curve(P, curve)
            P·∂ú = ECPoint(P, curve)
            P‚Åª·∂ú = ECPoint(point_neg(P, curve), curve)
            sum·∂ú = ECPoint(point_add(P, P‚Åª·∂ú.point, curve), curve)
            @test is_identity(sum·∂ú)
        end
    end

    @testset "Associativity sanity check" begin
        D·∂ú = ECPoint(point_add(G, G, curve), curve)
        G‚Åª = point_neg(G, curve)
        A = point_add(D·∂ú.point, G‚Åª, curve)
        B = point_add(G, point_add(G, G‚Åª, curve), curve)
        @test A == B
    end

    @testset "Infinity propagation" begin
        R‚ÇÅ = point_add(G, ‚àû, curve)
        R‚ÇÇ = point_add(‚àû, G, curve)
        @test R‚ÇÅ == G
        @test R‚ÇÇ == G
    end
end

