using Test
using TinyCrypto
import TinyCrypto: is_identity, is_infinity, inverse, is_singular, point_neg, point_add

@testset "Montgomery Curve Test Suite" begin
    # Shared curve setup Montgomery{ùîΩ‚ÇÉ‚Çá}: 8y¬≤ = x¬≥ + 3x¬≤ + x | ùîæ(15,2), q = 11, h = 4, #E = 44
    œÄ, B, A, order, cofactor = 37, 8, 3, 11, 4
    GÀ£ ∏ = (15, 2)
    curve = Montgomery(œÄ, B, A, order, cofactor, GÀ£ ∏)

    G·∂ú = curve.G
    G   = G·∂ú.point
    F   = typeof(G.x)

    I  = identity(curve).point
    I·∂ú = AffinePoint(infinity(curve), curve)
    ‚àû·∂ú = AffinePoint(infinity(curve), curve)
    G·∂ú + G·∂ú + G·∂ú + G·∂ú
    4G·∂ú
    curve
    curve_points(curve)
    S   = subgroup_points(curve)

    @testset "Subgroup matches [n]G·∂ú for n ‚àà 0:q-1" begin
        expected = Set(n * G·∂ú for n in 0:curve.order - 1)
        actual   = Set(S)
        @test expected == actual
    end

    @testset "Sanity checks and scalar multiplication" begin
        @test is_point_on_curve(G·∂ú, curve)
        @test is_generator(G, curve, curve.order)

        @test is_infinity(scalar_mult(0, G, curve))
        @test is_infinity(0 * G·∂ú)

        @test scalar_mult(1, G, curve) == G
        @test 1 * G·∂ú == G·∂ú

        @test scalar_mult(2, G, curve) == point_add(G, G, curve)
        @test 2 * G·∂ú == G·∂ú + G·∂ú

        @test scalar_mult(3, G, curve) == (3 * G·∂ú).point
        @test is_infinity(curve.order * G·∂ú)

        if curve.order > 5
            @test is_point_on_curve(2 * G·∂ú, curve)
            @test is_point_on_curve(3 * G·∂ú, curve)
            @test 3 * G·∂ú == 2 * G·∂ú + G·∂ú
        end
    end

    @testset "Point + identity = point" begin # OK
        R‚ÇÅ = point_add(G, I, curve)
        R‚ÇÇ = point_add(I, G, curve)
        @test R‚ÇÅ == G
        @test R‚ÇÇ == G
    end

    @testset "Point + inverse = identity" begin
        P·∂ú = G·∂ú
        N·∂ú = AffinePoint(point_neg(P·∂ú.point, curve), curve)
        R·∂ú = AffinePoint(point_add(P·∂ú.point, N·∂ú.point, curve), curve)
        @test is_infinity(R·∂ú)
    end

    @testset "Inverse properties" begin
        @test is_infinity(inverse(‚àû·∂ú))
        for P·∂ú in S
            Q·∂ú = inverse(P·∂ú)
            @test is_infinity(P·∂ú + Q·∂ú)
            @test inverse(inverse(P·∂ú)) == P·∂ú
            if !is_infinity(P·∂ú)
                @test Q·∂ú.point.x == P·∂ú.point.x
                @test Q·∂ú.point.y == -P·∂ú.point.y
            end
        end
    end

    @testset "All curve points satisfy the curve equation" begin
        for P in curve_points(curve)
            @test is_point_on_curve(AffinePoint(P, curve), curve)
        end
    end

    @testset "Scalar multiplication: [n]G ‚àà subgroup, ‚àÄ n < order" begin
        for n in 0:curve.order - 1
            @test is_point_on_curve(n * G·∂ú, curve)
        end
    end

    @testset "Montgomery group law: [m]G + [n]G == [(m+n)%r]G" begin
        r = curve.order
        for m in 0:r-1, n in 0:r-1
            P = m * G·∂ú
            Q = n * G·∂ú
            @test P + Q == mod(m + n, r) * G·∂ú
        end
    end

    @testset "Curve singularity check" begin
        @test !is_singular(curve)
    end

    @testset "Reject invalid points" begin
        bad = Point{F}(F(123), F(456))
        @test !is_point_on_curve(AffinePoint(bad, curve), curve)
    end

    @testset "Doubling edge case: vertical tangent" begin
        for P in curve_points(curve)
            if P.y !== nothing && P.y == F(0)
                @test is_infinity(point_add(P, P, curve))
            end
        end
    end

    @testset "Doubling matches scalar multiplication" begin
        @test point_add(G, G, curve) == scalar_mult(2, G, curve)
    end

    @testset "Scalar mult with ‚àû" begin
        for n in 0:10
            @test is_infinity(n * ‚àû·∂ú)
        end
    end

    @testset "Operator overload for negation" begin
        for P in S
            @test -P == inverse(P)
        end
    end
end
